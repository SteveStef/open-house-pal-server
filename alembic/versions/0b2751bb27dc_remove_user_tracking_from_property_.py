"""Remove user tracking from property interactions and comments

Revision ID: 0b2751bb27dc
Revises: 81fe7115e3bf
Create Date: 2025-09-01 17:21:49.702487

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0b2751bb27dc'
down_revision: Union[str, None] = '81fe7115e3bf'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop indexes first
    op.drop_index('idx_property_interaction_user', table_name='property_interactions')
    op.drop_index('idx_property_interaction_visitor', table_name='property_interactions')
    
    # Use batch operations for SQLite compatibility
    with op.batch_alter_table('property_comments', schema=None) as batch_op:
        batch_op.drop_column('visitor_email')
        batch_op.drop_column('visitor_name')
        batch_op.drop_column('user_id')

    with op.batch_alter_table('property_interactions', schema=None) as batch_op:
        batch_op.drop_column('visitor_email')
        batch_op.drop_column('user_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Use batch operations for SQLite compatibility
    with op.batch_alter_table('property_interactions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.VARCHAR(), nullable=True))
        batch_op.add_column(sa.Column('visitor_email', sa.VARCHAR(), nullable=True))
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])

    with op.batch_alter_table('property_comments', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.VARCHAR(), nullable=True))
        batch_op.add_column(sa.Column('visitor_name', sa.VARCHAR(), nullable=True))
        batch_op.add_column(sa.Column('visitor_email', sa.VARCHAR(), nullable=True))
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])
    
    # Recreate indexes
    op.create_index('idx_property_interaction_visitor', 'property_interactions', ['collection_id', 'property_id', 'visitor_email'], unique=1)
    op.create_index('idx_property_interaction_user', 'property_interactions', ['collection_id', 'property_id', 'user_id'], unique=1)
    # ### end Alembic commands ###
